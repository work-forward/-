1、快速排序
package main

import "fmt"

func main() {
    arr := []int{41, 24, 76, 11, 45, 64, 21, 69, 19, 36}
	quickSort(arr, 0, len(arr)-1)
    fmt.Println(arr)
}

func quickSort(arr []int, start, end int) {
	//if start < end { // 优化版1
	//	povit := parttion(arr, start, end)
	//	fmt.Println(povit)
	//	parttion(arr, 0, povit-1);
	//	parttion(arr, povit+1, end)
	//}
	if start < end {
		povit := findPartion(arr, start, end)
		fmt.Println(povit)
		quickSort(arr, 0, povit-1);
		quickSort(arr, povit+1, end)
	}
}

func findPartion(array []int, low, high int) int {
	key := array[low]
	tmpLow := low
	tmpHigh := high
	for {
		//查找小于等于key的元素，该元素的位置一定是tmpLow到high之间，因为array[tmpLow]及左边元素小于等于key，不会越界
		for array[tmpHigh] > key {
			tmpHigh--
		}
		//找到大于key的元素，该元素的位置一定是low到tmpHigh+1之间。因为array[tmpHigh+1]必定大于key
		for array[tmpLow] <= key && tmpLow < tmpHigh {
			tmpLow++
		}
		if tmpLow >= tmpHigh {
			break
		}
		array[tmpLow], array[tmpHigh] = array[tmpHigh], array[tmpLow]
	}
	array[tmpLow], array[low] = array[low], array[tmpLow]
	return tmpLow
}

func parttion(arr []int, low, high int) int {
	i := low-1
	povit := arr[high]
	for j := low; j < high; j++ {
		if arr[j] <= povit {
			i++
			arr[i], arr[j] = arr[j], arr[i]
		}
	}
	arr[i+1], arr[high] = arr[high], arr[i+1]
	return i+1
}
